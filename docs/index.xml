<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Terminal</title>
    <link>http://avi.im/blag/</link>
    <description>Recent content on Terminal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Dec 2016 19:03:00 +0530</lastBuildDate><atom:link href="http://avi.im/blag/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Install Go / Golang on macOS Sierra (10.12.x) using Homebrew</title>
      <link>http://avi.im/blag/2016/install-go-sierra/</link>
      <pubDate>Tue, 06 Dec 2016 19:03:00 +0530</pubDate>
      
      <guid>http://avi.im/blag/2016/install-go-sierra/</guid>
      <description>Do the following:
$ brew update $ brew install go ... ==&amp;gt; Caveats As of go 1.2, a valid GOPATH is required to use the `go get` command: https://golang.org/doc/code.html#GOPATH You may wish to add the GOROOT-based install location to your PATH: export PATH=$PATH:/usr/local/opt/go/libexec/bin ==&amp;gt; Summary üç∫ /usr/local/Cellar/go/1.7.4: 6,438 files, 250.7M  As it says we need to set GOPATH and also GOROOT:
$ mkdir $HOME/.go  If then add this to your profile, .</description>
    </item>
    
    <item>
      <title>Install Go / Golang on OS X El Capitan (10.11.x) using Homebrew</title>
      <link>http://avi.im/blag/2016/install-go-el-capitan/</link>
      <pubDate>Thu, 12 May 2016 19:20:00 +0530</pubDate>
      
      <guid>http://avi.im/blag/2016/install-go-el-capitan/</guid>
      <description>Do the following:
$ brew update $ brew install go --with-cc-all ==&amp;gt; Downloading https://homebrew.bintray.com/bottles/go-1.6.2.el_capitan.bottle.tar.gz Already downloaded: /Users/avi/Library/Caches/Homebrew/go-1.6.2.el_capitan.bottle.tar.gz ==&amp;gt; Pouring go-1.6.2.el_capitan.bottle.tar.gz ==&amp;gt; Caveats As of go 1.2, a valid GOPATH is required to use the `go get` command: https://golang.org/doc/code.html#GOPATH You may wish to add the GOROOT-based install location to your PATH: export PATH=$PATH:/usr/local/opt/go/libexec/bin ==&amp;gt; Summary üç∫ /usr/local/Cellar/go/1.6.2: 5,778 files, 325.3M  As it says we need to set GOPATH and also GOROOT:</description>
    </item>
    
    <item>
      <title>Catching SIGTERM in Python</title>
      <link>http://avi.im/blag/2016/sigterm-in-python/</link>
      <pubDate>Sat, 20 Feb 2016 17:03:00 +0530</pubDate>
      
      <guid>http://avi.im/blag/2016/sigterm-in-python/</guid>
      <description>I needed a very simple SIGTERM handler in a script I was working on. It is very simple to do so in Python, add a handler method and &amp;lsquo;register&amp;rsquo; it.
First define a handler method:
def sigterm_handler(signal, frame): # this method defines the handler i.e. what to do # when you receive a SIGTERM pass  And register the handler:
# Register the handler and let the process know that # there is a handler for SIGTERM signal.</description>
    </item>
    
    <item>
      <title>Git/Github fork-pull request-update cycle </title>
      <link>http://avi.im/blag/2016/git-fork-cycle-github/</link>
      <pubDate>Fri, 19 Feb 2016 23:03:00 +0530</pubDate>
      
      <guid>http://avi.im/blag/2016/git-fork-cycle-github/</guid>
      <description>Lets say there is a project called python and you want to contribute. So you should fork python project and ALWAYS create a separate branch for the patch/feature you are working on and NEVER commit on the master branch of forked repo.
Lets call your forked repo as python-forked.
Once you fork a project, add a git remote called upstream (or whatever name you feel like using), which points to original repo.</description>
    </item>
    
    <item>
      <title>Using uWSGI with Python 3</title>
      <link>http://avi.im/blag/2015/uwsgi-python3/</link>
      <pubDate>Fri, 18 Dec 2015 14:03:00 +0530</pubDate>
      
      <guid>http://avi.im/blag/2015/uwsgi-python3/</guid>
      <description>Gevent does not have Python 3 support yet, but its available as a release candidate. So this will lead to problems if you use the latest stable Gevent with Python 3. Follow these simple steps to install uSWGI and Gevent properly for Python 3.
  Uninstall existing uWSGI:
 pip uninstall uwsgi pip3 uninstall uwsgi    Install everything via pip3 and use Gevent v1.1rc3:
 pip install gevent==1.</description>
    </item>
    
    <item>
      <title>When is my Cake Day?</title>
      <link>http://avi.im/blag/2015/kekday/</link>
      <pubDate>Fri, 20 Nov 2015 22:20:00 +0530</pubDate>
      
      <guid>http://avi.im/blag/2015/kekday/</guid>
      <description>Reddit gives all the user info in a handy JSON at this URL: https://www.reddit.com/user/&amp;lt;username here&amp;gt;/about.json
example: https://www.reddit.com/user/spez/about.json
The created_utc field in data is the date of user&amp;rsquo;s registration aka Cake Day in unix epoch format (in UTC) and we can easily convert that to readable format:
&amp;gt;&amp;gt;&amp;gt; import time &amp;gt;&amp;gt;&amp;gt; time.strftime(&amp;#34;%D&amp;#34;, time.gmtime(1118030400)) &amp;#39;06/06/05&amp;#39; Using Python Requests, we can turn this into a handy function:
import time import requests def get_my_cake_day(username): url = &amp;#34;https://www.</description>
    </item>
    
    <item>
      <title>Staying Ahead of Amazon, in Amazon Treasure Hunt Contest</title>
      <link>http://avi.im/blag/2015/amazon-treasure-hunt/</link>
      <pubDate>Sat, 31 Oct 2015 22:20:00 +0530</pubDate>
      
      <guid>http://avi.im/blag/2015/amazon-treasure-hunt/</guid>
      <description>Last week Amazon India had a Treasure Hunt contest which ran for a whole week. The contest was simple, from 10am to 6pm, every hour Amazon would display a clue (image) and you had to guess the product. That particular product would be on sale for ‚Çπ1, which also included shipping cost anywhere in India. The contest was app only i.e. image also would be displayed in the app and you had to buy using the app.</description>
    </item>
    
    <item>
      <title>How I Am Maintaining Multiple Emails For Git On A Same Machine</title>
      <link>http://avi.im/blag/2015/multiple-git-emails/</link>
      <pubDate>Sat, 01 Aug 2015 22:20:00 +0530</pubDate>
      
      <guid>http://avi.im/blag/2015/multiple-git-emails/</guid>
      <description>Every git commit is associated with two important data: your name and email. I don&amp;rsquo;t want my personal email address associated with work related git commits and vice versa. First, to set the git email address system wide, you would run following:
$git config --global user.email &amp;quot;your_global@email.com&amp;quot; $git config --global user.name &amp;quot;Your Name&amp;quot;  and every commits will have above info. To set the email address for individual repo, just drop the global.</description>
    </item>
    
    <item>
      <title>I discovered a vulnerability on Gaana.com before the main POC hack</title>
      <link>http://avi.im/blag/2015/hacking-gaana/</link>
      <pubDate>Sun, 31 May 2015 19:20:00 +0530</pubDate>
      
      <guid>http://avi.im/blag/2015/hacking-gaana/</guid>
      <description>Update: I have removed the blog post. TLDR; On 12th of May I had discovered a vulnerability on Gaana.com. I contacted their team and it was fixed recently. I had written blog post in detail about it, now I think it&amp;rsquo;s best I remove everything. Thanks for reading!
 </description>
    </item>
    
    <item>
      <title>Flashing Asus-WRT Merlin by XVortex on NetGear NightHawk R7000</title>
      <link>http://avi.im/blag/2015/asus-wrt-merlin-on-netgear-r7000/</link>
      <pubDate>Sun, 10 May 2015 22:20:00 +0530</pubDate>
      
      <guid>http://avi.im/blag/2015/asus-wrt-merlin-on-netgear-r7000/</guid>
      <description>Note: There are many ways to achieve this and in this tutorial I follow two flash method.
Preparation:  This guide assumes you are on stock firmware. If you are already on DD WRT or Tomato, ignore step 2 of procedure. Doesn&amp;rsquo;t matter whether you are on Windows, Linux or Mac. Everything happens in browser Make sure you are connected to the router over one of WAN ports It doesn&amp;rsquo;t matter which firmware version you are currently on.</description>
    </item>
    
    <item>
      <title>Install Windows 8 UEFI on Legacy BIOS with Clover (and Dual boot with Yosemite)</title>
      <link>http://avi.im/blag/2014/install-uefi-windows-yosemite-dualboot/</link>
      <pubDate>Sun, 28 Dec 2014 16:20:00 +0530</pubDate>
      
      <guid>http://avi.im/blag/2014/install-uefi-windows-yosemite-dualboot/</guid>
      <description>In this tutorial I am going to explain how to install Windows 8 on a Legacy BIOS in UEFI mode (Yes! It&amp;rsquo;s possible!!) using Clover and dual boot with Yosemite. Technically this tutorial should work for Windows 7 and Mavericks also, but I haven&amp;rsquo;t tried.
This tutorial was originally written for Insanely Mac Forums. Check the original thread.
What you get? You have a machine with Legacy BIOS and at the end of tutorial, you would have Yosemite OS X and Windows 8.</description>
    </item>
    
    <item>
      <title>Scraping Javascript page using Python</title>
      <link>http://avi.im/blag/2014/scraping-javascript-website-python/</link>
      <pubDate>Sat, 18 Oct 2014 14:03:00 +0530</pubDate>
      
      <guid>http://avi.im/blag/2014/scraping-javascript-website-python/</guid>
      <description>Python library dryscape can be used to scrape javascript driven websites.
Code To give an example, I created a sample page with following HTML code. (link):
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;Javascript scraping test&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p id=&#39;intro-text&#39;&amp;gt;No javascript support&amp;lt;/p&amp;gt; &amp;lt;script&amp;gt; document.getElementById(&#39;intro-text&#39;).innerHTML = &#39;Yay! Supports javascript&#39;; &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  without javascript it says: No javascript support and with javascript: Yay! Supports javascript
Scraping without JS support: &amp;gt;&amp;gt;&amp;gt; import requests &amp;gt;&amp;gt;&amp;gt; from bs4 import BeautifulSoup &amp;gt;&amp;gt;&amp;gt; response = requests.</description>
    </item>
    
    <item>
      <title>Installing Transmission (remote and CLI) client on Raspberry Pi </title>
      <link>http://avi.im/blag/2013/installing-transmission-raspberry-pi/</link>
      <pubDate>Thu, 05 Dec 2013 10:20:00 +0530</pubDate>
      
      <guid>http://avi.im/blag/2013/installing-transmission-raspberry-pi/</guid>
      <description>I have found Transmission to be best client to run on Raspberry Pi. In this tutorial I will explain how to install Transmission and access it using it&amp;rsquo;s web interface over browser.
Though this tutorial is for Raspberry Pi, it should work for any computer running Debian flavour.
First run these commands to update and upgrade the packages you have installed.
sudo apt-get update sudo apt-get upgrade sudo apt-get install transmission-daemon  Create a directory where you will be saving the downloads.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://avi.im/blag/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://avi.im/blag/about/</guid>
      <description>Hey there! This is Avinash. I am a programmer from India. I mostly code in Python but learning Swift these days. I have dabbled little in Web Development using Python Tornado.
On Interwebz  GitHub ‚Äî Some of the Open Source code I have written and contributed. Stackoverflow ‚Äî I read the Python tagged questions often. Hacker News ‚Äî Pretty much addicted to this. Twitter ‚Äî I am mostly active on this thing.</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>http://avi.im/blag/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://avi.im/blag/projects/</guid>
      <description>I am learning Python and Swift these days. You can find some of my code on my GitHub.
Some of the (mini)projects I have done:
 Rockstar - Makes you a Rockstar C++ Programmer in 2 minutes. status - HTTP Status for Humans. prawoauth2 - Helper library to make your life easier using OAuth2 for PRAW. haxor ‚Äî Unofficial Python wrapper for official Hacker News API. Isso Openshift Deployment Kit ‚Äî helps you install Isso on Openshift with a single click.</description>
    </item>
    
  </channel>
</rss>
